classdef Spectrometer < Simplex
    
    % Basic spectrometer class
    properties
        nd (1,1) double % Number of captures
        nx (1,1) double % Number of pixels
        
        % Spectrometer
        x   (:,1) double % Spectrometer pixel wavelengths [nm]
        TSE (:,1) double % Spectral system efficiency factors (per-pixel) [1]
        FOV (1,1) double = 1e-13 % Field of view, solid angle, etc. [m^2 Sr]
        BoxFactor (1,1) double = 3e-3 % Scattering from inside the spectrometer [1]
        ADCoffset (1,1) double = 2400 % ADUs at zero electrons [count], may vary between experiments or over long experiments
        darkCurrent  (:,1) double = 0 % Thermally generated electrons [e/s]
        laserCurrent (:,1) double = 0 % Count distribution generated by laser scattering from sample [e/s]
        laserScale   (1,1) double = 1 % laser current scaling factor [1]
        dataMask     (:,1) logical    % Mask representing which points should be used in fitting (use if there is a problem on some portion of the spectrum)
        
        % Spectral data
        D (1,:) SpectrumCapture % Captured spectra, containing shot-specific parameters like counts, integration time
        L (1,:) double % Laser power setting as fraction of total [1]
        
        % Model data
        T           (1,:) double % Surface temperature, modeled [Â°C]
        Emiss       (:,:) double % The spectral emissivity of the sample for each capture
        ModelCounts (:,:) double % The modeled counts produced by the system for each capture
        FitError    (1,:) double % The different between model and observed counts
        
        DatasetLabel string = '' % The name of the dataset this model, if applicable
    end
    
    methods
        this = CopyParent(this,parent)  % Copy parameters from another Spec-derived object (e.g. a calibration)
        Visualize(this,I)               % Visually compare observed vs modeled counts for capture(s) I
        this = SpectrometerModel(this,I)% Run the model for capture(s) I
        this = ComputeDark(this,I)      % Given the indices of "dark" spectra, compute the dark current. Attempts to infer ADC offset if more than one integration time is used
        this = ComputeLaser(this,I)     % Given the indices of "only laser" spectra, compute the laser current. Requires ADCO/Dark currents to already be calculated
        
        % Constructor with copy:
        function this = Spectrometer(parent,D,L)
            this = this@Simplex();
            if nargin > 0; this.CopyParent(parent);  end
            if nargin == 2; this.InitializeModel(D); end
            if nargin == 3; this.InitializeModel(D,L); end
        end
        
        function this = InitializeModel(this,D,L)
            if nargin > 1; this.D = D; end
            if nargin > 2; this.L = L; end
            
            this.nx = numel(this.x);
            this.nd = numel(this.D);
            this.T = NaN([1 this.nd]);
            this.Emiss = ones([this.nx this.nd]);
            this.ModelCounts = NaN([this.nx this.nd]);
            this.FitError = NaN([1 this.nd]);           
        end
        
        % To be implemented by subclasses:
        %this = InitializePlot(this)
        %this = RefreshPlot(this)
        %this = RunModel(this)
        %err  = RunError(this)
    end
    
end